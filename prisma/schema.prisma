generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  FUNCIONARIO
  CLIENTE
}

model Tenant {
  id         String    @id @default(uuid())
  name       String
  slug       String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  planId     String
  plan       Plan      @relation(fields: [planId], references: [id])
  employees  Employee[]

  users      User[]
  products   Product[]
  categories Category[]
  attributes Attribute[]
  productVariants ProductVariant[]

  FinancialRecord FinancialRecord[]
}

model Plan {
  id             String   @id @default(uuid())
  name           String
  description    String?
  price          Decimal? @db.Decimal(10, 2)
  limitUsers     Int?
  limitProducts  Int?
  tenants        Tenant[]
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  password     String
  role         Role
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  
  products     Product[]
  categories   Category[]
  orders       Order[]        @relation("UserOrders")
  addresses    Address[]
  permissions  UserPermission[]

  isDeleted    Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  StockMovement StockMovement[]

  FinancialHistory FinancialHistory[]

  ActivityLog ActivityLog[]
}


model Employee {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  position  String
  salary    Float
  isActive  Boolean  @default(true)
  role      String
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id         String   @id @default(uuid())
  name       String
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  products   Product[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

   User User[]
}

model Product {
  id          String           @id @default(uuid())
  name        String
  description String?
  price       Decimal          @db.Decimal(10, 2)
  image       String?
  tenantId    String
  categoryId  String
  tenant      Tenant           @relation(fields: [tenantId], references: [id])
  category    Category         @relation(fields: [categoryId], references: [id])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  variants    ProductVariant[]
  User User[]
  OrderItem OrderItem[]

  StockMovement StockMovement[]
}

model ProductVariant {
  id         String   @id @default(uuid())
  name       String
  sku        String   @unique
  price      Decimal  @db.Decimal(10, 2)
  stock      Int
  image      String?
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  attributes ProductVariantAttribute[]
}

model Attribute {
  id        String   @id @default(uuid())
  name      String
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  values    AttributeValue[]

  ProductVariantAttribute ProductVariantAttribute[] @relation(name: "AttributeRelation")
}

model AttributeValue {
  id          String   @id @default(uuid())
  value       String
  attributeId String
  attribute   Attribute @relation(fields: [attributeId], references: [id])

  ProductVariantAttribute ProductVariantAttribute[] @relation(name: "AttributeValueRelation")
}

model ProductVariantAttribute {
  id                String           @id @default(uuid())
  productVariantId  String
  attributeId       String
  attributeValueId  String

  productVariant    ProductVariant   @relation(fields: [productVariantId], references: [id])
  attribute         Attribute        @relation(name: "AttributeRelation", fields: [attributeId], references: [id])
  attributeValue    AttributeValue   @relation(name: "AttributeValueRelation", fields: [attributeValueId], references: [id])

  @@unique([productVariantId, attributeId])
}

model Order {
  id         String       @id @default(uuid())
  clientId   String
  client     User         @relation("UserOrders", fields: [clientId], references: [id])
  status     OrderStatus
  total      Float
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  items      OrderItem[]
  isDeleted  Boolean      @default(false)
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  productId  String
  quantity   Int
  price      Float
  order      Order   @relation(fields: [orderId], references: [id])
  product    Product @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELED
}

model Address {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  zip        String
  city       String
  state      String
  street     String
  number     String
  complement String?
}

model UserPermission {
  id           String     @id @default(uuid())
  userId       String
  permissionId String
  user         User       @relation(fields: [userId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
}

model Permission {
  id    String   @id @default(uuid())
  name  String   @unique
  users UserPermission[]
}

model StockMovement {
  id           String   @id @default(uuid())
  productId    String
  product      Product  @relation(fields: [productId], references: [id])
  type         String   // "IN", "OUT", "ADJUST"
  quantity     Int
  reason       String?
  createdById  String
  createdBy    User     @relation(fields: [createdById], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum FinancialType {
  INCOME
  EXPENSE
}

model FinancialRecord {
  id         String         @id @default(uuid())
  type       FinancialType
  value      Float
  dueDate    DateTime
  paid       Boolean        @default(false)
  tenantId   String
  tenant     Tenant         @relation(fields: [tenantId], references: [id])
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model FinancialHistory {
  id           String   @id @default(uuid())
  recordId     String
  action       String   // "CREATED", "UPDATED", "PAID"
  changedById  String
  changedBy    User     @relation(fields: [changedById], references: [id])
  timestamp    DateTime @default(now())
}

model ActivityLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
